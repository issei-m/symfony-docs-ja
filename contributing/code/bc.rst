.. note::

    * 対象バージョン：2.3以降
    * 翻訳更新日：2014/04/25

後方互換性の保証について
========================

私達はプロジェクトの円滑なアップグレードの保証を最も重視しています。
そのためSymfonyではすべてのマイナーリリース間の後方互換性を保証します。
`セマンティックバージョニング`_と言うバージョニング戦略をご存知の方も多いでしょう。
セマンティックバージョニングとは、メジャーリリース（2.0や3.0など）だけが後方互換性を破壊できる事を意味します。
マイナーリリース（2.5や2.6のような）では新機能の追加が行われますが、そのリリースブランチ（前の例で言う2.x）の既存のAPIの後方互換性は保たれます。

.. caution::

    この保証はSymfony 2.3 から施行されたため、その前のバージョンには適用されません。

しかし、後方互換性と言っても様々な種類があります。
実際には、フレームワークに行われるほぼすべての変更がアプリケーションを破壊する恐れがあります。
例えば、クラスに新しいメソッドが追加された時、それを継承しているクラスが同名の異なるシグネチャのメソッドを持っていた場合、アプリケーションが壊れてしまいます。

また、全ての後方互換性の破壊がアプリケーションに影響を与えるわけではありません。
既存のクラスやアーキテクチャに大幅な変更が必要な場合もあれば、一方で、単にメソッド名を変更する等簡単に解決できる場合もあります。

そこで私達はこのページを作りました。"Symfonyコードの利用"セクションでは、どのようにすればアプリケーションを壊す事なく、確実に同じメジャーリリースブランチの新しいバージョンにアップグレードする事ができるかを説明します。

次の"Symfonyコードへの取り組み"は、Symfonyのコントリビュータ向けのセクションです。
このセクションではユーザの円滑なアップグレードを保証するために、すべてのコントリビュータが守るべき規約の詳細を列挙します。

Symfonyコードの利用
-------------------

プロジェクトでSymfonyを使用してる場合、以下のガイドラインに従うことで、今後のSymfonyのすべてのマイナーリリースに円滑にアップグレードする事ができます。

インターフェースの利用
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

Symfonyが用意する全てのインターフェースはタイプヒントで利用する事ができ、宣言されている全てのメソッドをコールすることができます。
私達は、これらの規則を守るコードを壊さないことを保証します。

.. caution::

    例外として、\ ``@internal``がタグ付けされているインターフェースが挙げられます。このようなインターフェースは使用、または実装すべきでありません。

インターフェースを実装する場合、まずそれがAPIインターフェースであるかを確認します。次のような、``@api``タグの付いている物がAPIインターフェースとなります::

    /**
     * HttpKernelInterface handles a Request to convert it to a Response.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @api
     */
    interface HttpKernelInterface
    {
        // ...
    }

APIインターフェースを実装していれば、将来そのコードが壊される事はありません。対照的に、レギュラーインターフェースはマイナーリリース時に新しいメソッドを追加するなどの拡張がされる可能性がある為、アップグレードの際は事前に確認を行い、必要に応じて手動でコードを移行しておく必要があります。

.. note::

    移行が必要な変更は最小限である事が保証され、それらの変更は常にSymfonyルートディレクトリに配置されているUPGRADEファイルに正確な移行の指示を明記します。

次の表は、どのようなユースケースで後方互換性が保たれるかを説明します。

+-------------------------------------------------+-----------------+-----------------+
| ユースケース                                    | レギュラー      | API             |
+=================================================+=================+=================+
| **あなたが...**                                 | **する場合は後方互換性を保証...** |
+-------------------------------------------------+-----------------+-----------------+
| インターフェースへのタイプヒント                | Yes             | Yes             |
+-------------------------------------------------+-----------------+-----------------+
| メソッドをコール                                | Yes             | Yes             |
+-------------------------------------------------+-----------------+-----------------+
| **あなたがインターフェースを実装し、かつ、...** | **する場合は後方互換性を保証...** |
+-------------------------------------------------+-----------------+-----------------+
| メソッドを実装                                  | No [1]_         | Yes             |
+-------------------------------------------------+-----------------+-----------------+
| 実装したメソッドに引数を追加                    | No [1]_         | Yes             |
+-------------------------------------------------+-----------------+-----------------+
| 引数にデフォルト値を設定                        | Yes             | Yes             |
+-------------------------------------------------+-----------------+-----------------+

.. include:: _api_tagging.rst.inc

クラスの利用
‾‾‾‾‾‾‾‾‾‾‾‾

Symfonyによって提供されるすべてのクラスはインスタンス化して、公開メソッドとプロパティを介してアクセスする事ができます。

.. caution::

    ``@internal`` タグの付いたクラス、プロパティやメソッド、並びに名前空間に ``**Tests**`` を含むクラスはこの規約の対象外となります。
    これらは内部利用の為に存在し、あなたのプロジェクトコードからアクセスされるべきではありません。

インターフェースと同様に、クラスもAPIクラス、通常クラスと明確に区別されています。
APIクラスもインターフェースと同様に ``@api`` タグが付けられています::

    /**
     * Request represents an HTTP request.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @api
     */
    class Request
    {
        // ...
    }

APIクラスとレギュラークラスの違いは、APIクラスは継承先でオーバーライドしたメソッドは完全な後方互換性の保証がされますが、
通常クラスはその限りではありません。例えば省略可能な引数がメソッドに追加される事があります。結果的に、あなたがオーバーライドしたメソッドとのシグネチャの不一致が生じ、致命的なエラーが発生する可能性があります。

.. note::

    インターフェースと同様に、クラスの変更は最小限に留められ、移行が必要な場合はSymfonyルートディレクトリに配置されているUPGRADEにその詳細な手順を示します。

場合によっては、 \``@api`` タグが特定のプロパティやメソッドにのみ（クラス単位ではなく）付けられている事があります。そのような場合、そのプロパティやメソッドに対する（下図のAPI列で示すように）後方互換性は完全に保証されますが、それ以外の部分に対してはその限りではありません。

安全を確保するために、以下のユースケースと後方互換性保証の対応表を確認して下さい:

+------------------------------------------------+-----------------+-----------------+
| ユースケース                                   | レギュラー      | API             |
+================================================+=================+=================+
| **あなたが...**                                | **する場合は後方互換性を保証...** |
+------------------------------------------------+-----------------+-----------------+
| クラスへのタイプヒント                         | Yes             | Yes             |
+------------------------------------------------+-----------------+-----------------+
| 新しいインスタンスを作成                       | Yes             | Yes             |
+------------------------------------------------+-----------------+-----------------+
| クラスを継承                                   | Yes             | Yes             |
+------------------------------------------------+-----------------+-----------------+
| publicプロパティにアクセス                     | Yes             | Yes             |
+------------------------------------------------+-----------------+-----------------+
| publicメソッドをコール                         | Yes             | Yes             |
+------------------------------------------------+-----------------+-----------------+
| **あなたがクラスを継承し、かつ、...**          | **する場合は後方互換性を保証...** |
+------------------------------------------------+-----------------+-----------------+
| protectedプロパティにアクセス                  | No [1]_         | Yes             |
+------------------------------------------------+-----------------+-----------------+
| protectedメソッドをコール                      | No [1]_         | Yes             |
+------------------------------------------------+-----------------+-----------------+
| publicプロパティをオーバーライド               | Yes             | Yes             |
+------------------------------------------------+-----------------+-----------------+
| protectedプロパティをオーバーライド            | No [1]_         | Yes             |
+------------------------------------------------+-----------------+-----------------+
| publicメソッドをオーバーライド                 | No [1]_         | Yes             |
+------------------------------------------------+-----------------+-----------------+
| protectedメソッドをオーバーライド              | No [1]_         | Yes             |
+------------------------------------------------+-----------------+-----------------+
| 新しいプロパティを追加                         | No              | No              |
+------------------------------------------------+-----------------+-----------------+
| 新しいメソッドを追加                           | No              | No              |
+------------------------------------------------+-----------------+-----------------+
| オーバーライドしたメソッドに引数を追加         | No [1]_         | Yes             |
+------------------------------------------------+-----------------+-----------------+
| 引数にデフォルト値を追加                       | Yes             | Yes             |
+------------------------------------------------+-----------------+-----------------+
| privateメソッドのコール（Reflectionによる）    | No              | No              |
+------------------------------------------------+-----------------+-----------------+
| privateプロパティにアクセス (Reflectionによる) | No              | No              |
+------------------------------------------------+-----------------+-----------------+

.. include:: _api_tagging.rst.inc

Symfony Codeへの取り組み
------------------------

Symfonyの改善に貢献する場合、ユーザーの円滑なアップグレードを保証する為に、下記で示すルールに厳格に則る必要があります。

インターフェースへの変更
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

次の表では、既存のインターフェースへの許可されている変更を示します:

===========================================  ==============  ==============
変更の内容                                   レギュラー      API
===========================================  ==============  ==============
インターフェースそのものを削除               No              No
インターフェース名、あるいは名前空間の変更   No              No
親インターフェースの追加                     Yes [2]_        Yes [3]_
親インターフェースの削除                     No              No
**メソッド**
メソッドの追加                               Yes [2]_        No
メソッドの削除                               No              No
メソッド名の変更                             No              No
親インターフェースに移動                     Yes             Yes
デフォルト値を持たない引数の追加             No              No
デフォルト値を持つ引数の追加                 Yes [2]_        No
引数の削除                                   Yes [4]_        Yes [4]_
引数にデフォルト値を設定                     Yes [2]_        No
引数のデフォルト値を削除                     No              No
引数にタイプヒントを設定                     No              No
引数のタイプヒントを削除                     Yes [2]_        No
引数の型を変更                               Yes [2]_ [5]_   No
戻り値の型を変更                             Yes [2]_ [6]_   No
===========================================  ==============  ==============

クラスへの変更
‾‾‾‾‾‾‾‾‾‾‾‾‾‾

次の表では、既存のクラスへの許可されている変更を示します:

========================================  ==============  ==============
変更の内容                                レギュラー      API
========================================  ==============  ==============
クラスそのものを削除                      No              No
finalに変更                               No              No
abstractに変更                            No              No
クラス名、あるいは名前空間の変更          No              No
親クラスの変更                            Yes [7]_        Yes [7]_
インターフェースの追加                    Yes             Yes
インターフェースの削除                    No              No
**publicプロパティ**
publicプロパティの追加                    Yes             Yes
publicプロパティの削除                    No              No
スコープの降格                            No              No
親クラスに移動                            Yes             Yes
**protectedプロパティ**
protectedプロパティの追加                 Yes             Yes
protectedプロパティの削除                 Yes [2]_        No
スコープの降格                            Yes [2]_        No
親クラスに移動                            Yes             Yes
**privateプロパティ**
privateプロパティの追加                   Yes             Yes
privateプロパティの削除                   Yes             Yes
**コンストラクタ**
必須な引数のないコンストラクタの追加      Yes [2]_        Yes [2]_
コンストラクタの削除                      Yes [2]_        No
publicコンストラクタのスコープの降格      No              No
protectedコンストラクタのスコープの降格   Yes [2]_        No
親クラスに移動                            Yes             Yes
**publicメソッド**
publicメソッドの追加                      Yes             Yes
publicメソッドの削除                      No              No
メソッド名の変更                          No              No
スコープの降格                            No              No
親クラスに移動                            Yes             Yes
デフォルト値を持たない引数の追加          No              No
デフォルト値を持つ引数の追加              Yes [2]_        No
引数の削除                                Yes [4]_        Yes [4]_
引数にデフォルト値を設定                  Yes [2]_        No
引数のデフォルト値を削除                  No              No
引数にタイプヒントを設定                  Yes [8]_        No
引数のタイプヒントを削除                  Yes [2]_        No
引数の型を変更                            Yes [2]_ [5]_   No
戻り値の型を変更                          Yes [2]_ [6]_   No
**protectedメソッド**
protectedメソッドの追加                   Yes             Yes
protectedメソッドの削除                   Yes [2]_        No
メソッド名の変更                          No              No
スコープの降格                            Yes [2]_        No
親クラスに移動                            Yes             Yes
デフォルト値を持たない引数の追加          Yes [2]_        No
デフォルト値を持つ引数の追加              Yes [2]_        No
引数の削除                                Yes [4]_        Yes [4]_
引数にデフォルト値を設定                  Yes [2]_        No
引数のデフォルト値を削除                  Yes [2]_        No
引数にタイプヒントを設定                  Yes [2]_        No
引数のタイプヒントを削除                  Yes [2]_        No
引数の型を変更                            Yes [2]_ [5]_   No
戻り値の型を変更                          Yes [2]_ [6]_   No
**privateメソッド**
protectedメソッドの追加                   Yes             Yes
protectedメソッドの削除                   Yes             Yes
メソッド名の変更                          Yes             Yes
スコープの降格                            Yes             Yes
デフォルト値を持たない引数の追加          Yes             Yes
デフォルト値を持つ引数の追加              Yes             Yes
引数の削除                                Yes             Yes
引数にデフォルト値を設定                  Yes             Yes
引数のデフォルト値を削除                  Yes             Yes
引数にタイプヒントを設定                  Yes             Yes
引数のタイプヒントを削除                  Yes             Yes
引数の型を変更                            Yes             Yes
戻り値の型を変更   
========================================  ==============  ==============

.. [1] Your code may be broken by changes in the Symfony code. Such changes will
       however be documented in the UPGRADE file.

.. [2] Should be avoided. When done, this change must be documented in the
       UPGRADE file.

.. [3] The added parent interface must not introduce any new methods that don't
       exist in the interface already.

.. [4] Only the last argument(s) of a method may be removed, as PHP does not
       care about additional arguments that you pass to a method.

.. [5] The argument type may only be changed to a compatible or less specific
       type. The following type changes are allowed:

       ===================  ==================================================================
       Original Type        New Type
       ===================  ==================================================================
       boolean              any `scalar type`_ with equivalent `boolean values`_
       string               any `scalar type`_ or object with equivalent `string values`_
       integer              any `scalar type`_ with equivalent `integer values`_
       float                any `scalar type`_ with equivalent `float values`_
       class ``<C>``        any superclass or interface of ``<C>``
       interface ``<I>``    any superinterface of ``<I>``
       ===================  ==================================================================

.. [6] The return type may only be changed to a compatible or more specific
       type. The following type changes are allowed:

       ===================  ==================================================================
       Original Type        New Type
       ===================  ==================================================================
       boolean              any `scalar type`_ with equivalent `boolean values`_
       string               any `scalar type`_ or object with equivalent `string values`_
       integer              any `scalar type`_ with equivalent `integer values`_
       float                any `scalar type`_ with equivalent `float values`_
       array                instance of ``ArrayAccess``, ``Traversable`` and ``Countable``
       ``ArrayAccess``      array
       ``Traversable``      array
       ``Countable``        array
       class ``<C>``        any subclass of ``<C>``
       interface ``<I>``    any subinterface or implementing class of ``<I>``
       ===================  ==================================================================

.. [7] When changing the parent class, the original parent class must remain an
       ancestor of the class.

.. [8] A type hint may only be added if passing a value with a different type
       previously generated a fatal error.

.. _セマンティックバージョニング: http://semver.org/
.. _スカラー型: http://php.net/manual/ja/function.is-scalar.php
.. _boolean値: http://php.net/manual/ja/function.boolval.php
.. _string値: http://www.php.net/manual/ja/function.strval.php
.. _integer値: http://www.php.net/manual/ja/function.intval.php
.. _float値: http://www.php.net/manual/ja/function.floatval.php

.. 2014/04/25 issei-m 6c1ded9af043f1711d6349db91711b2e5fc33bb4
